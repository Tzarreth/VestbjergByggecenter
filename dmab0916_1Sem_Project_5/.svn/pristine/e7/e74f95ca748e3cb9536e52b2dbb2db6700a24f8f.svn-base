package ui;
import ui.libTUI.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;

import javax.swing.text.html.HTMLDocument.Iterator;

import controller.*;
import model.*;


public class SupplyOrderUI {
	private ProductConverter pc = new ProductConverter();
	private SupplyOrderLineConverter sc = new SupplyOrderLineConverter();
	private SupplyOrderCtrl soCtrl;
	private HelpText help;
	private TextInput ti = new TextInput();


	public SupplyOrderUI(){
		soCtrl = new SupplyOrderCtrl();
	}

	public void SupplyOrderMainMenu(){
		boolean running = true;

		while (running) {
			System.out.println("--- Levenradør Bestilling ---");
			System.out.println("1. Tjek Lager for genbestillinger ");
			System.out.println("2. Varemodtagelse");
			System.out.println("3. Afslut");

			String choice = ti.promptString("Vælg menu: ");
			switch (choice) {
			case "1":
				restockStorage();
				break;
			case "2":
				recieveSupplyOrder();
				break;
			case "3":
				running = false;
				break;
			default:
				help.notExistingCommand();
				break;
			}
		}
	}

	public void restockStorage(){

		TextChoice<Product> tc = new TextChoice<Product>(pc);
		ArrayList<Product> possibleRestockProducts = soCtrl.findPossibleRestockProducts();
		ArrayList<Product> productsToOrder = new ArrayList<>();
		for (Product p : possibleRestockProducts){
			tc.addOption(p);
		}

		boolean selecting = true;
		while(selecting){
			Product p = tc.promptChoice("*******Vare der skal genbestilles:********" + "\n" + "Vælg vare:", "");
			if (p != null){
				productsToOrder.add(p);
				tc.removeOption(p);
			}
			else if (p == null){
				selecting = false;
			}
			else {
				System.out.println("Please enter valid number");
			}

			System.out.println("__________Tilføjet til bestilling:___________ ");
			printProducts(productsToOrder);
			System.out.println("______________________________________________");

		}
		approveOrder(productsToOrder);	
	}

	public void approveOrder(ArrayList<Product> productsToOrder){
		System.out.println("-----------------BESTILLINGS ORDER ------------------");
		HashMap<Supplier, SupplyOrder> map = soCtrl.sendApprovedProductsToOrder(productsToOrder); //TODO 
		printSupplyOrders(map);
		System.out.println("-----------------------------------------------------");

		String answer = ti.promptString("Bekræft Order(y/n)");
		if (answer.equals("y")){
			System.out.println("****************************************");
			System.out.println("*****      Order er afsendt       ******");
			System.out.println("****************************************");
		}
		else if (answer.equals("n")){
			System.out.println("Order er afbrudt");
		}
		else{
			System.out.println("Tast y eller n");
		}
	}


	private void printSupplyOrders(HashMap<Supplier, SupplyOrder> map) {
		Set<Supplier> suppliers = map.keySet();
		int y= 1;
		int i = 1;
		for (Supplier s : suppliers){
			System.out.println(i + ")**********" + map.get(s).getSupplier().getName()+"************");
			ArrayList<SupplyOrderLine> sol = map.get(s).getSupplyOrderLines();

			for (SupplyOrderLine sl : sol){
				Product p = sl.getProduct();
				System.out.println(y + sc.convertToString(sl));
				y++;
			}
			i++;

		}

	}


	public void printProducts(ArrayList<Product> array){
		int total = 0;
		for (Product p : array){
			System.out.println("-" + pc.convertToString(p) );
			total += (p.getPurchasePrice() * (p.getMaxAmount() - p.getQuantity()));
		}
		System.out.println("____________________");
		System.out.println("DelToal:  " +total);

	}

	public void recieveSupplyOrder(){

		boolean running = true;
		while(running){
			TextChoice<SupplyOrderLine> tc = new TextChoice<SupplyOrderLine>(sc);
			ArrayList<SupplyOrderLine> sol = soCtrl.getNotRecievedSupplyOrderLines();
			for (SupplyOrderLine s : sol){
				tc.addOption(s);
			}

			SupplyOrderLine tempS = tc.promptChoice("*********** Varemodtagelse **********", "Vælg vare");
			if (tempS == null){
				running = false;
			}
			else{	
				soCtrl.setSOLToRecieved(tempS);

			}
		}
	}





}





