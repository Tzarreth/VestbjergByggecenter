package test.model;

import static org.junit.Assert.*;

import java.lang.reflect.Field;
import java.util.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import exceptions.model.CustomerAlreadyExistsException;
import model.Customer;
import model.CustomerContainer;

/**
 * @author Tobias
 *
 */
public class CustomerContainerTest {

	private CustomerContainer customerCont;
	private Customer c1, c2, c3;

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		customerCont = CustomerContainer.getInstance();
		c1 = new Customer("Joe", "Ananas Street", "Ananas@pineapple.com", "12121212", "Privat");
		c2 = new Customer("Bob", "Banana Street", "Banana@pineapple.com", "21212121", "Privat");
		c3 = new Customer("Jane", "Citrus Street", "Citrus@pineapple.com", "22222222", "Erhverv");
	}

	@After
	public void tearDown() {
		customerCont.clear();
		Customer.clearIDs();
	}

	/**
	 * Testing addCustomer method in model.Customer. Trying to add customer to list.
	 * If customer has been added to list, size of list must increment by one.
	 * If size of list is 0, customer has not been added and size must be null.
	 * Expecting positive test.
	 * @throws CustomerAlreadyExistsException
	 */
	@Test
	public void testAddCustomerPositiveTest() throws CustomerAlreadyExistsException {
		customerCont.addCustomer(c1);
		assertNotNull(customerCont.size());
	}

	/**
	 * Testing addCustomer method in model.Customer. List must be empty before adding customers to list.
	 * If customer has been added to list, size of list must more than 0.
	 * If size of list is 0, nothing has been added to list.
	 * Expecting negative test.
	 * @throws CustomerAlreadyExistsException
	 */
	@Test
	public void testAddCustomerNegativeTest() throws CustomerAlreadyExistsException {
		assertEquals(0, customerCont.size());
	}

	/**
	 * Testing findCustomer method in model.Customer. Trying to find a customer by phone.
	 * Object c1 has phone number defined as "12121212"
	 * Trying to find an object with same phone number.
	 * Expecting positive test.
	 * @throws CustomerAlreadyExistsException 
	 */
	@Test
	public void testFindCustomerPositiveTest() throws CustomerAlreadyExistsException {
		customerCont.addCustomer(c1);
		assertNotNull(customerCont.findCustomer("12121212"));
	}

	/**
	 * Testing findCustomer method in model.Customer. Trying to find a customer by phone.
	 * Object c1 has phone number defined as "12121212"
	 * Trying to find an object with diffrent phonenumber.
	 * Expecting positive test.
	 * @throws CustomerAlreadyExistsException 
	 */
	@Test
	public void testFindCustomerNegativeTest() throws CustomerAlreadyExistsException {
		customerCont.addCustomer(c1);
		assertNull(customerCont.findCustomer("11111111"));
	}


	/**
	 * Testing autogenerateCustomerID method in model.Customer.
	 * For type "private" assuming 1 + autogenerated number.
	 * For "erhverv" assuming 2 + autogenerated number.
	 * Expecting positive test.
	 * @throws CustomerAlreadyExistsException 
	 */
	@Test
	public void testAutogenerateCustomerIDsPositiveTest() throws CustomerAlreadyExistsException {
		customerCont.addCustomer(c1);
		customerCont.addCustomer(c2);
		customerCont.addCustomer(c3);

		assertEquals("12", c2.getID());
		assertEquals("21", c3.getID());
	}

	/**
	 * Testing autogenerateCustomerID method in model.Customer.
	 * For type "private" assuming 1 + autogenerated number.
	 * For "erhverv" assuming 2 + autogenerated number.
	 * Expecting negative test.
	 * @throws CustomerAlreadyExistsException 
	 */
	@Test
	public void testAutogenerateCustomerIDsNegativeTest() throws CustomerAlreadyExistsException {
		customerCont.addCustomer(c1);
		customerCont.addCustomer(c2);
		customerCont.addCustomer(c3);

		assertNotEquals("21", c2.getID());
		assertNotEquals("12", c3.getID());
	} 
}
