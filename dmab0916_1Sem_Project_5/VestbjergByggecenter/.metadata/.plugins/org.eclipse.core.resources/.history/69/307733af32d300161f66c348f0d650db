package ui;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.RenderingHints.Key;
import java.util.ArrayList;
import java.util.Set;

import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JTextField;
import javax.swing.JList;
import ui.gui.*;
import controller.*;
import model.Customer;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.InputMethodEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;
import java.awt.event.ContainerAdapter;
import java.awt.event.ContainerEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import javax.swing.JButton;
import java.awt.Font;

public class CreateOrderGUI extends JFrame {

	private JPanel contentPane;
	private JTextField txt1;
	private DefaultListModel<String> listModel = new DefaultListModel();
	private CustomerCtrl cCtrl = new CustomerCtrl();
	private CustomerConverter cConvert = new CustomerConverter();
	private JList list;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		MainGUI.setup();
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					CreateOrderGUI frame = new CreateOrderGUI();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public CreateOrderGUI() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 585, 407);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		txt1 = new JTextField();
		txt1.setRequestFocusEnabled(false);
		txt1.setFont(new Font("Comic Sans MS", Font.BOLD, 15));
		txt1.addKeyListener(new KeyAdapter() {
			@Override
			public void keyReleased(KeyEvent arg0) {
				System.out.println("Poop");
				textBoxActive();
			}
		});

	
		txt1.setBounds(71, 80, 180, 22);
		contentPane.add(txt1);
		txt1.setColumns(10);

		list = new JList();
		list.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
			
				if (e.getKeyCode()==KeyEvent.VK_ENTER){
					btnVlgClicked();
				}
				if(e.getKeyCode()==KeyEvent.VK_DOWN){
					list.setSelectedIndex(1);
					System.out.println("ssnn");
				}
			}
		});
		list.setBounds(71, 104, 220, 144);
		contentPane.add(list);
		list.setModel(listModel);
		list.setVisible(false);
		
		JButton btnVlg = new JButton("V\u00E6lg");
		btnVlg.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				btnVlgClicked();
			}
		});
		btnVlg.setBounds(316, 79, 97, 25);
		contentPane.add(btnVlg);
		btnVlg.setMnemonic(KeyEvent.VK_ENTER);
		
		
	
	}

	protected void btnVlgClicked() {
		String customer = (String)list.getSelectedValue();
		String phone = customer.substring(0, 8);
		System.out.println(phone);
		txt1.setText("");
		listModel.clear();
		list.setVisible(false);
		
	}

	protected void textBoxActive() {
		System.out.println("YO");
		if (!txt1.getText().equals("")){
			list.setVisible(true);
		filterModel(listModel, txt1.getText());
		//filterPhoneNumbers(txt1.getText());	
		}
		else{
			list.setVisible(false);
		}
	}

	public void filterModel(DefaultListModel<String> model, String filter) {
		ArrayList<Customer> customers = cCtrl.getAll();
		
		for (int i = 0; i<customers.size(); i++) {
			Customer c = customers.get(i);
			if (!c.getPhone().startsWith(filter)) {
				if (model.contains(cConvert.convertToString(c))){
					model.removeElement(cConvert.convertToString(c));
				}
			} else {
				if (!model.contains(cConvert.convertToString(c))) {
					model.addElement(cConvert.convertToString(c));
					//list.setSelectedIndex(0);
					
					
				}
			}
		}

	}
	
	public void filterPhoneNumbers(String filter){
		ArrayList<Customer> customers = cCtrl.getAll();
		listModel.clear();
		for (Customer c : customers ){
			if (c.getPhone().startsWith(filter)){
				listModel.addElement(cConvert.convertToString(c));
			}
			/*else if(!c.getPhone().startsWith(filter) && listModel.contains(cConvert.convertToString(c))){
				listModel.removeElement(cConvert.convertToString(c));
			}*/
		}
	}
}